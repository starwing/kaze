// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdr {
    /// basic info
    #[prost(string, tag = "1")]
    pub body_type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub src_ident: u32,
    /// rpc related info
    #[prost(uint32, tag = "3")]
    pub ret_code: u32,
    #[prost(uint32, tag = "4")]
    pub version: u32,
    /// when has timeout, a response packet is expected
    ///
    /// == 0 means no timeout
    #[prost(uint32, tag = "5")]
    pub timeout: u32,
    /// custom extra data
    #[prost(map = "string, bytes", tag = "9")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(oneof = "hdr::RpcType", tags = "6, 7, 8")]
    pub rpc_type: ::core::option::Option<hdr::RpcType>,
    /// route type
    #[prost(oneof = "hdr::RouteType", tags = "10, 11, 12, 13")]
    pub route_type: ::core::option::Option<hdr::RouteType>,
}
/// Nested message and enum types in `Hdr`.
pub mod hdr {
    /// ident selector with mask. only match if (dstIdent & mask) == ident
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct DstMask {
        #[prost(uint32, tag = "1")]
        pub ident: u32,
        #[prost(uint32, tag = "2")]
        pub mask: u32,
    }
    /// destination ident list for multicast
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DstMulticast {
        /// all idents that the pkg will be sent to
        #[prost(uint32, repeated, tag = "1")]
        pub dst_idents: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum RpcType {
        /// request sequence number
        #[prost(uint32, tag = "6")]
        Req(u32),
        /// the request sequence number that responds to
        #[prost(uint32, tag = "7")]
        Rsp(u32),
        /// notify sequence number
        #[prost(uint32, tag = "8")]
        Ntf(u32),
    }
    /// route type
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RouteType {
        /// send pkg to dstIdent
        #[prost(uint32, tag = "10")]
        DstIdent(u32),
        /// send pkg to one of idents that match ident with mask
        #[prost(message, tag = "11")]
        DstRandom(DstMask),
        /// send pkg to all idents that match ident with mask
        #[prost(message, tag = "12")]
        DstBroadcast(DstMask),
        /// send pkg to all idents that match ident with mask
        #[prost(message, tag = "13")]
        DstMulticast(DstMulticast),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RetCode {
    RetOk = 0,
    /// Can not find route to destination
    RetUnreachable = 1,
    /// request timeout
    RetTimeout = 2,
}
impl RetCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RetOk => "RET_OK",
            Self::RetUnreachable => "RET_UNREACHABLE",
            Self::RetTimeout => "RET_TIMEOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RET_OK" => Some(Self::RetOk),
            "RET_UNREACHABLE" => Some(Self::RetUnreachable),
            "RET_TIMEOUT" => Some(Self::RetTimeout),
            _ => None,
        }
    }
}
