// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdr {
    #[prost(string, tag = "1")]
    pub body_type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub src_ident: u32,
    #[prost(uint32, tag = "3")]
    pub seq: u32,
    #[prost(uint32, tag = "4")]
    pub ack: u32,
    #[prost(map = "string, string", tag = "9")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(uint32, tag = "10")]
    pub ret_code: u32,
    #[prost(uint32, tag = "11")]
    pub version: u32,
    #[prost(oneof = "hdr::RouteType", tags = "5, 6, 7, 8")]
    pub route_type: ::core::option::Option<hdr::RouteType>,
}
/// Nested message and enum types in `Hdr`.
pub mod hdr {
    /// ident selector with mask. only match if dstIdent & mask == ident
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct DstMask {
        #[prost(uint32, tag = "1")]
        pub ident: u32,
        #[prost(uint32, tag = "2")]
        pub mask: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DstMulticast {
        /// all idents that the pkg will be sent to
        #[prost(uint32, repeated, tag = "1")]
        pub dst_idents: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RouteType {
        /// send pkg to dstIdent
        #[prost(uint32, tag = "5")]
        DstIdent(u32),
        /// send pkg to one of idents that match ident with mask
        #[prost(message, tag = "6")]
        DstRandom(DstMask),
        /// send pkg to all idents that match ident with mask
        #[prost(message, tag = "7")]
        DstBroadcast(DstMask),
        /// send pkg to all idents that match ident with mask
        #[prost(message, tag = "8")]
        DstMulticast(DstMulticast),
    }
}
